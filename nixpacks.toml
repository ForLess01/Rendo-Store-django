[phases.setup]
nixPkgs = [
    'python310',
    'python310Packages.pip',
    'python310Packages.virtualenv',
    'python310Packages.setuptools',
    'python310Packages.wheel',
    'postgresql',
    'gcc',
    'libffi',
    'zlib',
    'libjpeg',
    'libpqxx',
    'openssl',
    'pkg-config',
    'nodejs_20'
]

[phases.install]
cmds = [
    # Crear entorno virtual
    "python -m venv /app/venv",
    # Usar pip del entorno virtual
    "/app/venv/bin/pip install --upgrade pip setuptools wheel",
    # Instalar dependencias de Python
    "/app/venv/bin/pip install -r requirements.txt --no-cache-dir",
    # Verificar instalación de Django
    "/app/venv/bin/python -c \"import django; print(f'Django version: {django.__version__}')\""
]

[phases.build]
cmds = [
    # Crear directorio estático si no existe
    "mkdir -p /app/static",
    # Cambiar al directorio de la app theme para instalar dependencias
    "cd theme/static_src && npm install",
    # Usar Django Tailwind para instalar dependencias (alternativo)
    "/app/venv/bin/python manage.py tailwind install --no-input || echo 'Tailwind install failed, trying manual approach'",
    # Construir Tailwind CSS usando Django
    "/app/venv/bin/python manage.py tailwind build || (cd theme/static_src && npm run build)",
    # Recolectar archivos estáticos
    "/app/venv/bin/python manage.py collectstatic --noinput --clear"
]