[phases.setup]
nixPkgs = [
    'python310',
    'python310Packages.pip',
    'python310Packages.virtualenv',
    'python310Packages.setuptools',
    'python310Packages.wheel',
    'postgresql',
    'gcc',
    'libffi',
    'zlib',
    'libjpeg',
    'libpqxx',
    'openssl',
    'pkg-config',
    'nodejs_20' # Node.js (incluye npm)
]

[phases.install]
cmds = [
    # Crear entorno virtual
    "python -m venv /app/venv",
    # Usar pip del entorno virtual
    "/app/venv/bin/pip install --upgrade pip setuptools wheel",
    # Instalar dependencias de Python
    "/app/venv/bin/pip install -r requirements.txt --no-cache-dir",
    # Actualizar npm a la última versión
    "npm install -g npm@latest",
    # Verificar instalación de Django
    "/app/venv/bin/python -c \"import django; print(f'Django version: {django.__version__}')\""
]

[phases.build]
cmds = [
    # Crear directorio estático si no existe
    "mkdir -p /app/static",
    # Instalar dependencias de Node.js directamente en la app 'theme'
    "npm install --prefix theme",
    # Crear el directorio de salida para el CSS de Tailwind
    "mkdir -p ./theme/static/css",
    # Construir el CSS de Tailwind usando npx
    "npx tailwindcss -i ./theme/static/src/input.css -o ./theme/static/css/tailwind.css --minify",
    # Recolectar archivos estáticos
    "/app/venv/bin/python manage.py collectstatic --noinput --clear"
]